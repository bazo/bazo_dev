<?php/** * Mokuji CMS * * @copyright  Copyright (c) 2009 Martin Bazik * @package    Mokuji *//** * FrontModule BasePresenter. * * @author     Martin Bazik * @package    FrontModule */class Front_BasePresenter extends Presenter{	public $oldLayoutMode = false;	public $oldModuleMode = false, $pathToTheme, $viewTemplatePath, $presenterTemplatePath;	protected $themesDir = 'themes';		/** @persistent */ 	public $lang;  	  	public function startup()	{        parent::startup();	    //$application = Environment::getApplication();	    if (!isset($this->lang))	    {	      $this->lang = $this->getHttpRequest()->detectLanguage(array('en','sk'));	      $this->canonicalize();	    }				Macros::registerMacros();		$this->absoluteUrls = TRUE;		$user = Environment::getUser();		$this->template->user = $user;		$translator = new Translator($this->lang);		$this->template->setTranslator($translator);		$this->template->website = Environment::getVariable('website');		$this->template->domain = 'http://'.Environment::getVariable('website');		$site_config = ConfigAdapterIni::load(APP_DIR.'/config/site.ini');		foreach($site_config['site'] as $var => $value)		{			Environment::setVariable($var, $value);		}		Environment::setVariable('themesDir', 'themes');        $this->template->keywords = Environment::getVariable('keywords');        $this->template->description = Environment::getVariable('description');        $this->setupThemePath();	}	        	public function actionLogout()	{		Environment::getUser()->signOut();		$this->flashMessage('You have been logged off.');		$this->redirect('Default:default');	}    	protected function createComponentCss()  	{        $theme = Environment::getVariable('theme');        $css = new CssLoader;        $css->absolutizeUrls = true;        $css->media = 'screen, tv, projection';        $css->sourcePath = APP_DIR.$this->pathToTheme . "/css";;        $css->sourceUri = APP_DIR.$this->pathToTheme;        $css->tempUri = Environment::getVariable("baseUri") . "css/front";        $css->tempPath = WWW_DIR . "/css/front";        $css->filters[] = array($this, "encodeImages");        return $css;  	}	public function encodeImages($code)	{        $encoder = new DataURIFilter();        return $encoder->convert($code);	}	protected function createComponentJs()  	{        $js = new JavaScriptLoader;        $js->tempUri = Environment::getVariable("baseUri") . "js";        $js->tempPath = WWW_DIR . "/js";        $js->sourcePath = APP_DIR.$this->pathToTheme . "/js";;        $js->joinFiles = Environment::isProduction();        if (Environment::isProduction()) {                //$js->filters[] = array($this, "packJs");        }        return $js;  	}	protected function packJs($code)  	{        $packer = new JavaScriptPacker($code, "None");        return $packer->pack();  	}		public function model($model_name)	{        static $model_instances;        $model_class = 'Front_'.ucfirst($model_name).'Model';        $model_instances[$model_name] = new $model_class();        return $model_instances[$model_name];	}		public function formatLayoutTemplateFiles($presenter, $layout)	{        $themesDir = Environment::getVariable('themesDir');        $theme = Environment::getVariable('theme');        $appDir = Environment::getVariable('appDir');        $path = '/' . str_replace(':', 'Module/', $presenter);        $pathP = substr_replace($path, '/'.$themesDir.'/'.$theme.'/templates', strrpos($path, '/'), 0);        $list = array(                "$appDir$pathP/@$layout.phtml",                "$appDir$pathP.@$layout.phtml",        );        while (($path = substr($path, 0, strrpos($path, '/'))) !== FALSE) {                $list[] = "$appDir$path".'/'.$themesDir.'/'.$theme.'/templates/'."@$layout.phtml";        }        return $list;	}    private function setupThemePath()    {        $presenter = $this->getName();        $parts = explode(':', $presenter);        Environment::setVariable('moduleDir', $parts[0].'Module');        $themesDir = Environment::getVariable('themesDir');        $theme = Environment::getVariable('theme');        $appDir = Environment::getVariable('appDir');        $path = '/' . str_replace(':', 'Module/', $presenter);        $pathP = substr_replace($path, '/'.$themesDir.'/'.$theme.'/templates', strrpos($path, '/'), 0);        $this->pathToTheme = substr($pathP,0,  strrpos($pathP, '/'));        $this->pathToTheme = substr($this->pathToTheme,0,  strrpos($this->pathToTheme, '/'));        $path = substr_replace($path, '/'.$themesDir.'/'.$theme.'/templates', strrpos($path, '/'));        $this->viewTemplatePath = $appDir.$pathP;        $this->presenterTemplatePath = $appDir.$path;    }    	public function formatTemplateFiles($presenter, $view)	{        return array(                $this->viewTemplatePath."/$view.phtml",                $this->viewTemplatePath.".$view.phtml",                $this->presenterTemplatePath."/@global.$view.phtml",        );	}	    	//MACRO COMPONENTS	public function createComponentMenu()	{        $menu = new Menu();        $menu->url = $this->getHttpRequest()->getUri()->getAbsoluteUri();        $menu->setTranslator(new Translator($this->lang));        return $menu;	}		public function createComponentSearchBox()	{        $box = new SearchForm();        return $box;	}}